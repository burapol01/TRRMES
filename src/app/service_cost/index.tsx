import React, { ChangeEvent, useEffect, useState } from 'react';
import FullWidthTextField from '../../components/MUI/FullWidthTextField';
import FullWidthButton from '../../components/MUI/FullWidthButton';
import EnhancedTable from '../../components/MUI/DataTables';
import FuncDialog from '../../components/MUI/FullDialog';
import * as XLSX from 'xlsx';
import { useDispatch, useSelector } from 'react-redux';
import CutOffBody from './component/CutOffBody';
import moment from 'moment';
import { getCurrentAccessObject, updateSessionStorageCurrentAccess } from '../../service/initmain';
import { confirmModal } from '../../components/MUI/Comfirmmodal';
import { endLoadScreen, startLoadScreen } from '../../../redux/actions/loadingScreenAction';
import { Massengmodal } from '../../components/MUI/Massengmodal';
import { _POST } from '../../service/mas';
import { service_cost_headCells } from '../../../libs/columnname';
import ActionManageCell from '../../components/MUI/ActionManageCell';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import CancelIcon from '@mui/icons-material/Cancel';
import { green, grey } from '@mui/material/colors';
import AutocompleteComboBox from '../../components/MUI/AutocompleteComboBox';
import { v4 as uuidv4 } from "uuid";
import ServiceCostBody from './component/ServiceCostBody';
import { useListServiceCost } from './core/service_cost_provider';
import '../service_cost/css/styles.css';  // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå CSS
import { checkValidate, isCheckValidateAll } from '../../../libs/validations';

interface OptionsState {

}

const initialOptions: OptionsState = {

};

export default function ServiceCost() {
    const {

        defaultDataList,
        setDefaultDataList,
        cutOffMonthAndYear,
        setCutOffMonthAndYear,
        currentAccessModel,
        setCurrentAccessModel,
        setIsValidate,

    } = useListServiceCost();

    const dispatch = useDispatch()
    const [actionType, setActionType] = useState<string | null>(null);
    const [excelData, setExcelData] = useState<any[]>([]); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Excel ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î

    //============================== useState ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô / ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á ================================
    const [dataList, setDataList] = useState<any[]>([]);
    const [options, setOptions] = useState<OptionsState>(initialOptions); // State for combobox options
    const [resultData, setResultData] = useState<any>(null); // State to store draft data   // State to store serviceCost data  
    const menuFuncList = useSelector((state: any) => state?.menuFuncList);
    const [openAdd, setOpenAdd] = useState(false);
    const [openView, setOpenView] = useState<any>(false);
    const [openAllocateCost, setOpenAllocateCost] = useState(false);
    const [openEdit, setOpenEdit] = useState(false);
    const [openDelete, setOpenDelete] = useState(false);
    const currentUser = useSelector((state: any) => state?.user?.user);

    //========================= useState ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ==============================================
    // const currentYear = new Date().getFullYear();

    // const monthYearOptions = Array.from({ length: 12 }, (_, i) => ({
    //     id: uuidv4(),
    //     label: `${String(i + 1).padStart(2, "0")}/${currentYear}`,
    //     value: `${String(i + 1).padStart(2, "0")}/${currentYear}`
    // }));
    // //
    // const [selectedStart, setSelectedStart] = useState<any>(monthYearOptions[0]);
    // const [selectedEnd, setSelectedEnd] = useState<any>(monthYearOptions[11]);

    const [dateStart, setDateStart] = useState("");
    const [dateEnd, setDateEnd] = useState("");


    //‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà
    const employeeUsername = currentUser?.employee_username.toLowerCase()
    const roleName = currentUser?.role_name;
    const roleId = currentUser?.role_id;
    //const showButton = (menuFuncList || []).some((menuFunc: any) => menuFunc.func_name === "Add");
    const isValidationEnabled = import.meta.env.VITE_APP_ENABLE_VALIDATION === 'true'; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const employeeDomain = currentUser?.employee_domain;
    const screenName = 'Service Cost';

    useEffect(() => {
        const currentAccessDataList = {
            employeeUsername: employeeUsername,
            employeeDomain: employeeDomain,
            screenName: screenName, // Ensure screenName is defined.
        };

        setCurrentAccessModel(currentAccessDataList);
    }, [employeeUsername, employeeDomain, screenName]); // Add dependencies here.



    //===================================== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏´‡∏•‡∏±‡∏Å ===============================================

    // Use useEffect to call dataTableMasterUser_GET only on specific action
    useEffect(() => {

        if (actionType) {
            dataTableCutOff_GET(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏™‡πà‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            setActionType(null); // Reset actionType after fetching data
        }
    }, [actionType]);

    //============================= ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô handleClick =============================================

    //------------------- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const handleSearch = () => {
        setActionType('search');
    };

    //------------------- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const handleReset = () => {
        // setSelectedStart(monthYearOptions[0])
        // setSelectedEnd(monthYearOptions[11])
        setDateStart("");
        setDateEnd("");
        setActionType('reset');
    };

    //------------------- ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô Modals
    const handleClose = () => {
        setOpenAdd(false);
        setOpenView(false);
        setOpenAllocateCost(false);
        setCutOffMonthAndYear("");
        setIsValidate(false);
        dataTableCutOff_GET();
    };

    //------------------- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Modals
    const handleDataChange = (data: any) => {
        //console.log(data, 'data');
        setResultData(data);

    };

    //------------------- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const handleClickAdd = () => {
        setOpenAdd(true);
    };

    //------------------- ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const handleClickView = (data: any) => {
        console.log(data, '‡∏ï‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° View : ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• data');

        setOpenView(true);
        setDefaultDataList(data)
        setCutOffMonthAndYear(data.cut_off_month + '/' + data.cut_off_year)


    };
    //------------------- ‡∏õ‡∏±‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ 
    const handleClickAllocateCost = (data: any) => {
        //console.log(data, '‡∏ï‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° View : ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• data');

        setOpenAllocateCost(true);
        setDefaultDataList(data)
        setCutOffMonthAndYear(data.cut_off_month + '/' + data.cut_off_year)

    };

    //===================================== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏´‡∏•‡∏±‡∏Å ===============================================       
    //------------------- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á User Get 
    useEffect(() => {
        console.log('Call : üü¢[2] fetch Data TableMasterUser GET', moment().format('HH:mm:ss:SSS'));
        //console.log(monthYearOptions, 'monthYearOptions');

        if (!currentUser) return;
        dataTableCutOff_GET();

    }, [currentUser]);

    //-------------------- Get ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏™‡πà ‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    const dataTableCutOff_GET = async () => {
        console.log('Call : dataTableCutOff_GET', moment().format('HH:mm:ss:SSS'));

        if (!currentUser) return;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        // if (selectedStart.value && selectedEnd.value && selectedStart.value > selectedEnd.value) {
        if (dateStart && dateEnd && dateStart > dateEnd) {
            // alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î');
            Massengmodal.createModal(
                <div className="text-center p-4">
                    <p className="text-xl font-semibold mb-2 text-green-600">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</p>
                </div>,
                'error',
                async () => {
                    dispatch(endLoadScreen());
                    setDateStart("");
                    setDateEnd("");
                    // setSelectedStart(monthYearOptions[0])
                    // setSelectedEnd(monthYearOptions[11])

                }
            );
            return; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        }

        const dataset = {

            cutOffModel: {
                // start_month: selectedStart.value || null,
                // end_month: selectedEnd.value || null          
                start_month: dateStart || null,
                end_month: dateEnd || null
            },
            currentAccessModel: getCurrentAccessObject(employeeUsername, employeeDomain, screenName)
        };

        try {
            const response = await _POST(dataset, "/api_trr_mes/CutOff/CutOff_Get");

            if (response && response.status === "success") {
                const { data: result } = response;

                const newData: any = []

                Array.isArray(result) && result.forEach((el) => {
                    //console.log(el, "üòäüòäüòä");
                    // ‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å Material UI ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤ true/false
                    el.cut_off_flag_label = el.cut_off_flag ? (
                        <CheckCircleIcon style={{ color: green[500] }} />
                    ) : (
                        // <CancelIcon style={{ color: grey[400] }} />
                         "-"
                    );

                    el.import_service_cost_flag_label = el.import_service_cost_flag ? (
                        <CheckCircleIcon style={{ color: green[500] }} />
                    ) : (
                        // <CancelIcon style={{ color: grey[400] }} />
                        "-"
                    );

                    el.allcate_flag_label = el.allcate_flag ? (
                        <CheckCircleIcon style={{ color: green[500] }} />
                    ) : (
                        // <CancelIcon style={{ color: grey[400] }} />
                         "-"
                    );

                    el.cut_off_month_and_year_label = el.cut_off_month + "/" + el.cut_off_year

                    el.ACTION = null
                    el.ACTION = (
                        <ActionManageCell
                            onClick={(name) => {
                                if (name == 'View') {
                                    handleClickView(el)
                                } else if (name == 'Allocate Cost') {
                                    handleClickAllocateCost(el)
                                }
                            }}
                        //Defauft={true} //‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
                        />
                    )

                    newData.push(el)
                })
                console.log(newData, '‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å ‡∏ï‡∏≤‡∏£‡∏≤‡∏á');

                setDataList(newData);
            }
        } catch (e) {
            console.error("Error fetching :", e);
        }
    };

    //-------------------- Add Data ‡πÑ‡∏õ‡∏•‡∏á Database
    const serviceCostAdd = () => {
        console.log('Call : serviceCostAdd', resultData, moment().format('HH:mm:ss:SSS'));

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô  Update Current Access Event Name
        updateSessionStorageCurrentAccess('event_name', 'Add/serviceCostAdd')

        const dataForValidate = {
            asOfMonth: resultData?.selectedMonth ? `${resultData?.selectedMonth?.value}/${resultData?.selectedYear?.value}` : null,
            asOfYear: resultData?.selectedYear ? `${resultData?.selectedMonth?.value}/${resultData?.selectedYear?.value}` : null
        }
        const isValidate = checkValidate(dataForValidate, ['asOfMonth', 'asOfYear'],);

        const isValidateAll = isCheckValidateAll(isValidate);

        console.log(dataForValidate, 'test');
        if (Object.keys(isValidateAll).length > 0 && isValidationEnabled) {
            console.log(isValidateAll,);
            setIsValidate(isValidate);
            return;
        }
        setIsValidate(null);
        // console.log('Call : isValidate', isValidate, moment().format('HH:mm:ss:SSS'));
        // console.log('Call : isValidateAll', isValidateAll, moment().format('HH:mm:ss:SSS'));
        confirmModal.createModal("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ?", "info", async () => {
            if (resultData) {

                console.log("Saving serviceCostAdd data:", resultData);

                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
                const payload = {
                    closeMonthlyCutOffModel: {
                        as_of_month: `${resultData?.selectedMonth?.value}/${resultData?.selectedYear?.value}`
                    },
                    currentAccessModel: getCurrentAccessObject(employeeUsername, employeeDomain, screenName)
                };

                dispatch(startLoadScreen());
                setTimeout(async () => {
                    try {
                        console.log('serviceCostAdd model', payload);

                        // ‡πÉ‡∏ä‡πâ _POST ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        const response = await _POST(payload, "/api_trr_mes/CutOff/CloseMonthlyCutOff");

                        if (response && response.status === "success") {
                            console.log('serviceCostAdd successfully:', response);

                            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                            Massengmodal.createModal(
                                <div className="text-center p-4">
                                    <p className="text-xl font-semibold mb-2 text-green-600">Success</p>
                                    {/* <p className="text-lg text-gray-800">
                            <span className="font-semibold text-gray-900">Request No:</span>
                            <span className="font-bold text-indigo-600 ml-1">{response.req_no}</span>
                          </p> */}
                                </div>,
                                'success',
                                async () => {
                                    dispatch(endLoadScreen());
                                    handleClose();
                                });
                        } else {
                            console.error('Failed to serviceCostAdd:', response);
                            dispatch(endLoadScreen());
                            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                            Massengmodal.createModal(
                                <div className="text-center p-4">
                                    <p className="text-xl font-semibold mb-2 text-green-600">{response.data[0].errorMessage}</p>
                                    {/* <p className="text-lg text-gray-800">
                            <span className="font-semibold text-gray-900">Request No:</span>
                            <span className="font-bold text-indigo-600 ml-1">{response.req_no}</span>
                          </p> */}
                                </div>,
                                'error',
                                async () => {
                                    dispatch(endLoadScreen());
                                });
                        }
                    } catch (error) {
                        console.error('Error serviceCostAdd:', error);
                        dispatch(endLoadScreen());
                        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    }

                }, 0);
            }
        });

    };

    //-------------------- Add Data ‡πÑ‡∏õ‡∏•‡∏á Database
    const allocateCost = () => {
        console.log('Call : allocateCost', resultData, moment().format('HH:mm:ss:SSS'));

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô  Update Current Access Event Name
        updateSessionStorageCurrentAccess('event_name', 'Add/Service_Request_Draft_Add')

        // const dataForValidate = {
        //     costCenter: draftData.costCenter,
        //     serviceCenter: draftData.serviceCenter,
        //     jobType: draftData.jobType,
        //     budgetCode: draftData?.jobType?.lov_code === "Repair" ? false : draftData.budgetCode,
        // }
        // const isValidate = checkValidate(dataForValidate, ['costCenter', 'serviceCenter', 'jobType', 'budgetCode', 'fixedAssetCode']);

        // if (draftData?.jobType?.lov_code === "Repair") {
        //     isValidate.budgetCode = false;
        // }

        // const isValidateAll = isCheckValidateAll(isValidate);

        // if (isDuplicate && isValidationEnabled) {
        //     return;
        // }
        // console.log(isValidateAll,);
        // if (Object.keys(isValidateAll).length > 0 && isValidationEnabled) {
        //     console.log(isValidateAll,);
        //     setIsValidate(isValidate);
        //     return;
        // }
        // setIsValidate(null);
        // console.log('Call : isValidate', isValidate, moment().format('HH:mm:ss:SSS'));
        // console.log('Call : isValidateAll', isValidateAll, moment().format('HH:mm:ss:SSS'));
        // confirmModal.createModal("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ?", "info", async () => {
        //     if (resultData) {

        //         console.log("Saving serviceCostAdd data:", resultData);

        //         // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
        //         const payload = {
        //             closeMonthlyCutOffModel: {
        //                 as_of_month: `${resultData?.selectedMonth?.value}/${resultData?.selectedYear?.value}`
        //             },
        //             currentAccessModel: getCurrentAccessObject(employeeUsername, employeeDomain, screenName)
        //         };

        //         dispatch(startLoadScreen());
        //         setTimeout(async () => {
        //             try {
        //                 console.log('serviceCostAdd model', payload);

        //                 // ‡πÉ‡∏ä‡πâ _POST ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        //                 const response = await _POST(payload, "/api_trr_mes/CutOff/CloseMonthlyCutOff_Reset");

        //                 if (response && response.status === "success") {
        //                     console.log('serviceCostAdd successfully:', response);

        //                     // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        //                     Massengmodal.createModal(
        //                         <div className="text-center p-4">
        //                             <p className="text-xl font-semibold mb-2 text-green-600">Success</p>
        //                             {/* <p className="text-lg text-gray-800">
        //                     <span className="font-semibold text-gray-900">Request No:</span>
        //                     <span className="font-bold text-indigo-600 ml-1">{response.req_no}</span>
        //                   </p> */}
        //                         </div>,
        //                         'success',
        //                         async () => {
        //                             dispatch(endLoadScreen());
        //                             handleClose();
        //                         });
        //                 } else {
        //                     console.error('Failed to serviceCostAdd:', response);
        //                     dispatch(endLoadScreen());
        //                     // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        //                     Massengmodal.createModal(
        //                         <div className="text-center p-4">
        //                             <p className="text-xl font-semibold mb-2 text-green-600">{response.data[0].errorMessage}</p>
        //                             {/* <p className="text-lg text-gray-800">
        //                     <span className="font-semibold text-gray-900">Request No:</span>
        //                     <span className="font-bold text-indigo-600 ml-1">{response.req_no}</span>
        //                   </p> */}
        //                         </div>,
        //                         'error',
        //                         async () => {
        //                             dispatch(endLoadScreen());
        //                         });
        //                 }
        //             } catch (error) {
        //                 console.error('Error serviceCostAdd:', error);
        //                 dispatch(endLoadScreen());
        //                 // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        //             }

        //         }, 0);
        //     }
        // });

    };









    // ‡∏•‡πâ‡∏≤‡∏á excelData ‡πÄ‡∏°‡∏∑‡πà‡∏≠ dialog ‡πÄ‡∏õ‡∏¥‡∏î
    // useEffect(() => {
    //     //console.log(currentUser, 'currentUser');

    //     if (openAdd) {
    //         setExcelData([]); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Excel ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î dialog
    //     }
    // }, [openAdd, currentUser]);

    // useEffect(() => {

    //     //console.log(excelData, 'excelData');



    // }, [excelData]);

    return (
        <div>
            <div className="max-lg rounded overflow-hidden shadow-xl bg-white mt-5 mb-5">
                {/* ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
                <div className="px-6 pt-4">
                    <label className="text-2xl ml-2 mt-3 mb-5 sarabun-regular">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</label>
                </div>
                <div className="row px-10 pt-0 pb-5">

                    <div className="px-10 pt-0 pb-5">
                        <div className="flex items-center space-x-4">
                            {/* ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô */}
                            <div className="w-full md:w-3/12">
                                <FullWidthTextField
                                    labelName={"‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ (Ex.01/2024)"}
                                    value={dateStart}
                                    onChange={(value) => setDateStart(value)}
                                />
                                {/* <AutocompleteComboBox
                                    required="required"
                                    labelName="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"
                                    column="label"
                                    setvalue={setSelectedStart}
                                    options={monthYearOptions}
                                    value={selectedStart}
                                /> */}
                            </div>
                            {/* ‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö "‡∏ñ‡∏∂‡∏á" */}
                            {/* <label className="text-lg pt-10">‡∏ñ‡∏∂‡∏á</label> */}
                            {/* ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î */}
                            {/* <div className="w-full md:w-2/12">
                                <FullWidthTextField
                                    labelName={"‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"}
                                    value={dateEnd}
                                    onChange={(value) => setDateEnd(value)}
                                />
                            </div> */}
                        </div>
                    </div>
                    <div className="flex justify-end pt-2">
                        <div className="col-md-1 px-1">
                            <FullWidthButton
                                labelName={"‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"}
                                handleonClick={handleSearch}
                                variant_text="contained"
                                colorname={"success"}
                            />
                        </div>
                        <div className="col-md-1 px-1">
                            <FullWidthButton
                                labelName={"‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï"}
                                handleonClick={handleReset}
                                variant_text="contained"
                                colorname={"inherit"}
                            />
                        </div>
                    </div>
                </div>
            </div>

            {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
            <div className="max-lg rounded overflow-hidden shadow-lg bg-white mb-5">
                <div>
                    <EnhancedTable
                        buttonLabal_1={"‡∏õ‡∏¥‡∏î‡∏á‡∏ß‡∏î"}
                        buttonColor_1="info"
                        rows={dataList}
                        headCells={service_cost_headCells}
                        handleonClick_1={handleClickAdd}
                        tableName={"‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ Allocate ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"}
                    />
                </div>
                {/* Dialog ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå */}
                <FuncDialog
                    open={openAdd}
                    dialogWidth="xl"
                    openBottonHidden={true}
                    titlename={'‡∏õ‡∏¥‡∏î‡∏á‡∏ß‡∏î'}
                    handleClose={handleClose}
                    handlefunction={serviceCostAdd}
                    colorBotton="success"
                    actions={"Cutoff"}
                    element={
                        <CutOffBody
                            onDataChange={handleDataChange}
                        />}
                />
                <FuncDialog
                    open={openView}
                    dialogWidth="xl"
                    openBottonHidden={true}
                    titlename={'‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                    handleClose={handleClose}
                    handlefunction={allocateCost}
                    colorBotton="success"
                    actions={"Reade"}
                    element={
                        <ServiceCostBody
                            onDataChange={handleDataChange}
                            actions={"Reade"}
                            handleClose={handleClose}
                        />}
                />
                <FuncDialog
                    open={openAllocateCost}
                    dialogWidth="xl"
                    openBottonHidden={true}
                    titlename={'‡∏õ‡∏±‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ / ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏±‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢'}
                    handleClose={handleClose}
                    //handlefunction={serviceCostAdd}
                    colorBotton="success"
                    actions={"AllocateCost"}
                    element={
                        <ServiceCostBody
                            onDataChange={handleDataChange}
                            actions={"AllocateCost"}
                            handleClose={handleClose}
                        />}
                />


                {/* Dialog ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå */}
                {/* <FuncDialog
                    open={openAdd}
                    dialogWidth="xl"
                    openBottonHidden={true}
                    titlename={'‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Service Cost'}
                    handleClose={handleClose}
                    handlefunction={serviceCostAdd}  
                    colorBotton="success"
                    actions={"ImportFile"}
                    element={
                        <ServiceCostBody
                            handleFileUpload={handleFileUpload}
                            excelData={excelData} // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á ServiceCostBody
                        />} // ‡∏™‡πà‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleFileUpload ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ServiceCostBody
                /> */}
            </div>
        </div>
    );
}
