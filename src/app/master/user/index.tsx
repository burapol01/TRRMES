import React, { useEffect, useState } from 'react'
import FullWidthTextField from '../../../components/MUI/FullWidthTextField'
import AutocompleteComboBox from '../../../components/MUI/AutocompleteComboBox'
import FullWidthButton from '../../../components/MUI/FullWidthButton'
import moment from 'moment';
import { _POST } from '../../../service/mas';
import EnhancedTable from '../../../components/MUI/DataTables';
import { useDispatch, useSelector } from 'react-redux';
import { MasterUser_headCells } from '../../../../libs/columnname';
import ActionManageCell from '../../../components/MUI/ActionManageCell';
import { dateFormatTimeEN } from '../../../../libs/datacontrol';
import { createFilterOptions } from '@mui/material';
import CustomizedSwitches from '../../../components/MUI/MaterialUISwitch';
import FuncDialog from '../../../components/MUI/FullDialog';
import UserBody from './component/UserBody';
import { result } from 'lodash';
import { checkValidate, isCheckValidateAll } from '../../../../libs/validations';
import { useListUser } from './core/user_provider';
import { confirmModal } from '../../../components/MUI/Comfirmmodal';
import { Massengmodal } from '../../../components/MUI/Massengmodal';
import { endLoadScreen, startLoadScreen } from '../../../../redux/actions/loadingScreenAction';
import { v4 as uuidv4 } from 'uuid';
import { updateSessionStorageCurrentAccess } from '../../../service/initmain';

//======================== OptionsState ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Drop Down ==========================
/*
    - ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á interface options state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó(Type)
*/
interface OptionsState {
  costCenter: any[];
  serviceCenter: any[];
  costAndServiceCenters: any[];
}

const initialOptions: OptionsState = {
  costCenter: [],
  serviceCenter: [],
  costAndServiceCenters: [],
};
//=================================== set ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•  ==================================
//‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
const initialUserValues = { //-----‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠
  userId: "",
  userAd: "",
  userName: "",
  costCenterId: "",
};


export default function User() {

  //========================= useState ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ==============================================
  const [userAd, setUserAd] = useState("");
  const [userName, setUserName] = useState("");
  const [selectedCostCenter, setSelectedCostCenter] = useState<any>(null);
  const [selectedServiceCenter, setSelectedServiceCenter] = useState<any>(null);
  const [optionsSearch, setOptionsSearch] = useState<OptionsState>(initialOptions); // State for combobox options
  const [options, setOptions] = useState<OptionsState>(initialOptions); // State for combobox options
  const handleAutocompleteChange = (setter: React.Dispatch<React.SetStateAction<any>>) => (value: any) => {
    setter(value);
  };
  const [actionType, setActionType] = useState<string | null>(null); // Corrected type
  const [error, setError] = useState<string | null>(null); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î 

  //============================== useState ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô / ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á ================================
  const [dataList, setDataList] = useState<any[]>([]);
  const menuFuncList = useSelector((state: any) => state?.menuFuncList);
  const [openAdd, setOpenAdd] = useState(false);
  const [openView, setOpenView] = useState<any>(false);
  const [openEdit, setOpenEdit] = useState(false);
  const [openDelete, setOpenDelete] = useState(false);
  const currentUser = useSelector((state: any) => state?.user?.user);

  // State to store default values ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á
  const [defaultValues, setDefaultValues] = useState(initialUserValues);
  const [resultData, setResultData] = useState<any>(null); // State to store draft data  

  //‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà : ‡πÑ‡∏ß‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°" ‡πÅ‡∏™‡∏î‡∏á ‡πÅ‡∏•‡∏∞ ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á
  const employeeUsername = currentUser?.employee_username.toLowerCase()
  const showButton = (menuFuncList || []).some((menuFunc: any) => menuFunc.func_name === "Add");
  const isValidationEnabled = import.meta.env.VITE_APP_ENABLE_VALIDATION === 'true'; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const roleName = currentUser?.role_name;
  const dispatch = useDispatch()

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sessionStorage
  function cleanAccessData(key: string) {
    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å session storage
    const storedAccessData = sessionStorage.getItem(key);
    if (storedAccessData) {
      try {
        // ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        return JSON.parse(storedAccessData);
      } catch (error) {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
        const cleanedData = storedAccessData.replace(/\\/g, '').replace(/[\u0000-\u001F\u007F-\u009F]/g, '');
        try {
          return JSON.parse(cleanedData);
        } catch (error) {
          console.error('Error parsing JSON after cleanup:', error);
          return null; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á
        }
      }
    } else {
      console.log(`No value found in sessionStorage for ${key}.`);
      return null; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    }
  }  

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Current Access
  const currentAccessObject = cleanAccessData('current_access');
  updateSessionStorageCurrentAccess('screen_name', 'User');
  //console.log(currentAccessObject);


  //console.log(currentAccessData, 'current_access'); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô session storage

  //Revision
  const [revisionMaximum, setRevisionMaximum] = useState<any>(null);

  //==================================== useState Validate  =====================================
  const { isValidate, setIsValidate } = useListUser()

  //============================= ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• =========================================
  useEffect(() => {
    console.log('Call : üü¢[1] Search fetch Master Data', moment().format('HH:mm:ss:SSS'));
    const initFetch = async () => {
      try {
        await searchFetchCostCentersAndServicerCenter(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
      } catch (error) {
        console.error('Error in initFetch:', error);
      }
    };

    initFetch();
  }, []); // [] ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ñ‡∏π‡∏Å mount

  //‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡πà‡πÅ‡∏™‡∏î‡∏á 200 ‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const OPTIONS_LIMIT = 200;
  const defaultFilterOptions = createFilterOptions();
  const filterOptions = (optionsSearch: any[], state: any) => {
    return defaultFilterOptions(optionsSearch, state).slice(0, OPTIONS_LIMIT);
  };

  // Use useEffect to call dataTableMasterUser_GET only on specific action
  useEffect(() => {

    if (actionType) {
      dataTableMasterUser_GET(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏™‡πà‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      setActionType(null); // Reset actionType after fetching data
    }
  }, [actionType]);

  const searchFetchCostCentersAndServicerCenter = async () => {
    console.log('Call : searchFetchCostCenters', moment().format('HH:mm:ss:SSS'));

    const dataset = {

    };

    try {
      const response = await _POST(dataset, "/api_trr_mes/MasterData/Master_Cost_Center_Get");

      if (response && response.status === "success") {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Cost Center ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const allCenters = response.data;

        // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Service Center (service_center_flag = false)
        const costCenters = allCenters
          .filter((center: any) => !center.service_center_flag) // ‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å service_center_flag = false
          .map((center: any) => ({
            costCenterId: center.id,
            costCenterCode: center.cost_center_code,
            costCenterName: center.cost_center_name,
            costCentersCodeAndName: "[" + center.site_code + "] " + center.cost_center_name + ' [' + center.cost_center_code + ']'
          }));

        // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Service Center
        const serviceCenters = allCenters
          .filter((center: any) => center.service_center_flag) // ‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å service_center_flag
          .map((center: any) => ({
            serviceCenterId: center.id,
            serviceCenterCode: center.cost_center_code,
            serviceCenterName: center.cost_center_name,
            serviceCentersCodeAndName: "[" + center.site_code + "] " + center.cost_center_name + ' [' + center.cost_center_code + ']'
          }));

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô setOptionsSearch
        setOptionsSearch((prevOptions) => ({
          ...prevOptions,
          costCenter: costCenters,     // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Cost Center
          serviceCenter: serviceCenters // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Service Center
        }));

        console.log(costCenters, 'Cost Center');
        console.log(serviceCenters, 'Service Center');
      } else {
        setError("Failed to fetch cost centers.");
      }
    } catch (error) {
      console.error("Error fetching cost centers:", error);
      setError("An error occurred while fetching cost centers.");
    }
  };

  //============================= ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô handleClick =============================================
  //------------------- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleSearch = () => {
    setActionType('search');
  };

  //------------------- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleReset = () => {
    setUserName("");
    setUserAd("");
    setSelectedCostCenter(null);
    setSelectedServiceCenter(null);
    setActionType('reset');
  };

  //------------------- ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô Modals
  const handleClose = () => {
    setOpenView(false);
    setOpenAdd(false);
    setOpenEdit(false);
    setOpenDelete(false);
    setIsValidate(null);
    readData(null);
    dataTableMasterUser_GET(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå 

  };

  //------------------- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleClickAdd = () => {
    setOpenAdd(true);
  };

  //------------------- SetData Reade ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
  const readData = async (data: any) => {
    console.log('Call : readData', data, moment().format('HH:mm:ss:SSS'));
    await setDefaultValues({
      ...defaultValues,
      userId: data?.id || '',
      userAd: data?.user_ad || '',
      userName: data?.user_name || '',
      costCenterId: data?.cost_center_id || '',

    })
  };

  //------------------- ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleClickView = (data: any) => {
    //console.log(data, '‡∏ï‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° View : ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• data');

    setOpenView(true);
    readData(data)

  };

  //------------------- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleClickEdit = (data: any) => {
    setOpenEdit(true);;
    readData(data)

  };

  //------------------- ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleClickDelete = (data: any) => {
    setOpenDelete(true);;
    readData(data)

  };

  //------------------- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Modals
  const handleDataChange = (data: any) => {
    setResultData(data); // ‡∏ú‡∏•‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Models
  };

  //===================================== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏´‡∏•‡∏±‡∏Å ===============================================
  //------------------- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á User Get 
  useEffect(() => {
    console.log('Call : üü¢[2] fetch Data TableMasterUser GET', moment().format('HH:mm:ss:SSS'));
    if (!currentUser) return;
    dataTableMasterUser_GET();
    FetchMasterDataCostCentersAndServivcCenter();

  }, [currentUser]);

  //-------------------- Get ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MasterData Cost Centers & Servivc Center
  const FetchMasterDataCostCentersAndServivcCenter = async () => {
    console.log('Call : FetchMasterDataCostCenters', moment().format('HH:mm:ss:SSS'));

    if (!currentUser) return;
    const dataset = {

    };

    try {
      const response = await _POST(dataset, "/api_trr_mes/MasterData/Master_Cost_Center_Get");

      if (response && response.status === "success") {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Cost Center ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const allCenters = response.data;

        // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Cost Center
        const costAndServiceCenters = allCenters.map((center: any) => ({
          costCenterId: center.id,
          costCenterCode: center.cost_center_code,
          costCenterName: center.cost_center_name,
          costCentersCodeAndName: "[" + center.site_code + "] " + center.cost_center_name + ' [' + center.cost_center_code + ']' + (center.service_center_flag === true ? ' (Service Center)' : ''),
          appReqUser: center.app_req_user,
          costCentersSiteCode: center.site_code
        }));

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô setOptionsSearch
        setOptions((prevOptions) => ({
          ...prevOptions,
          costAndServiceCenters: costAndServiceCenters,     // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Cost Center
        }));

        console.log(allCenters, 'Master Data allCenters');
      } else {
        setError("Failed to fetch cost centers.");
      }
    } catch (error) {
      console.error("Error fetching cost centers:", error);
      setError("An error occurred while fetching cost centers.");
    }
  };

  //-------------------- Get ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏™‡πà ‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  const dataTableMasterUser_GET = async () => {
    console.log('Call : dataTableMasterUser_GET', moment().format('HH:mm:ss:SSS'));

    if (!currentUser) return;

    const dataset = {
      user_ad: userAd,
      user_name: userName,
      cost_center_id: selectedCostCenter?.costCenterId,
      service_center_id: selectedServiceCenter?.serviceCenterId
    };

    try {
      const response = await _POST(dataset, "/api_trr_mes/MasterData/Master_User_Get");

      if (response && response.status === "success") {
        const { data: result } = response;

        const newData: any = []

        Array.isArray(result) && result.forEach((el) => {
          //console.log(el, "üòäüòäüòä");

          el.create_date = dateFormatTimeEN(el.create_date, "DD/MM/YYYY HH:mm:ss")
          el.update_date = dateFormatTimeEN(el.update_date, "DD/MM/YYYY HH:mm:ss")
          el.cost_center_label = el.service_center_flag === false ? "[" + el.cost_center_code + "]" + " | " + el.cost_center_name : "";
          el.service_center_label = el.service_center_flag === true ? "[" + el.cost_center_code + "]" + " | " + el.cost_center_name : "";

          el.ACTION = null
          el.ACTION = (
            <ActionManageCell
              onClick={(name) => {
                if (name == 'View') {
                  handleClickView(el)
                } else if (name == 'Edit') {
                  handleClickEdit(el)
                } else if (name == 'Delete') {
                  handleClickDelete(el)
                }
              }}
              Defauft={true} //‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
            />
          )
          newData.push(el)
        })
        console.log(newData, '‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å ‡∏ï‡∏≤‡∏£‡∏≤‡∏á');

        setDataList(newData);
      }
    } catch (e) {
      console.error("Error fetching cost requests:", e);
    }
  };

  //-------------------- Add Data ‡πÑ‡∏õ‡∏•‡∏á Database
  const UserAdd = async () => {
    console.log('Call : UserAdd', resultData, moment().format('HH:mm:ss:SSS'));

     // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô  Update Current Access Event Name
     updateSessionStorageCurrentAccess('event_name', 'Add/Master_User_Add');

     // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• currentAccessObject ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å sessionStorage ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
     const storedAccessData = sessionStorage.getItem('current_access');
     const currentAccessObject = storedAccessData ? JSON.parse(storedAccessData) : {};
     console.log(currentAccessObject, 'currentAccessObject');

    const dataForValidate = {
      costCenter: resultData.costCenter,
      userAd: resultData.userAd,
      userName: resultData.userName,
    }
    const isValidate = checkValidate(dataForValidate, ['costCenter']);
    const isValidateAll = isCheckValidateAll(isValidate);
    if (Object.keys(isValidateAll).length > 0 && isValidationEnabled) {
      console.log(isValidateAll,);
      setIsValidate(isValidate);
      return;
    }
    setIsValidate(null);
    confirmModal.createModal("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ?", "info", async () => {
      if (resultData) {

        console.log("Saving resultData:", resultData);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
        const payload = {
          UserModel: {
            id: uuidv4(),
            user_ad: resultData.userAd,
            user_name: resultData.userName,
            cost_center_id: resultData.costCenter?.costCenterId,

          },
          currentAccessModel: currentAccessObject
        };


        dispatch(startLoadScreen());
        setTimeout(async () => {
          try {
            console.log('payload model', payload);

            // ‡πÉ‡∏ä‡πâ _POST ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const response = await _POST(payload, "/api_trr_mes/MasterData/Master_User_Add");

            if (response && response.status === "success") {
              console.log('JobDone successfully:', response);
              // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
              Massengmodal.createModal(
                <div className="text-center p-4">
                  <p className="text-xl font-semibold mb-2 text-green-600">Success</p>
                  {/* <p className="text-lg text-gray-800">
                <span className="font-semibold text-gray-900">Request No:</span>
                <span className="font-bold text-indigo-600 ml-1">{response.req_no}</span>
              </p> */}
                </div>,
                'success', () => {
                  dispatch(endLoadScreen());
                  handleClose();
                });
            } else {
              console.error('Failed to JobDone:', response);
              dispatch(endLoadScreen());
              Massengmodal.createModal(
                <div className="text-center p-4">
                  <p className="text-xl font-semibold mb-2 text-green-600">{response.data[0].errorMessage}</p>
                  {/* <p className="text-lg text-gray-800">
                <span className="font-semibold text-gray-900">Request No:</span>
                <span className="font-bold text-indigo-600 ml-1">{response.req_no}</span>
              </p> */}
                </div>,
                'error', () => {
                  dispatch(endLoadScreen());
                });
              // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            }
          } catch (error) {
            console.error('Error JobDone:', error);
            dispatch(endLoadScreen());
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          }

        }, 2000);
      }
    });

  };

  //-------------------- Edit Data ‡πÑ‡∏õ‡∏•‡∏á Database
  const UserEdit = async () => {
    console.log('Call : UserEdit', resultData, moment().format('HH:mm:ss:SSS'));

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô  Update Current Access Event Name
    updateSessionStorageCurrentAccess('event_name', 'Edit/Master_User_Edit');

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• currentAccessObject ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å sessionStorage ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const storedAccessData = sessionStorage.getItem('current_access');
    const currentAccessObject = storedAccessData ? JSON.parse(storedAccessData) : {};
    console.log(currentAccessObject, 'currentAccessObject');

    const dataForValidate = {
      costCenter: resultData.costCenter,
      userAd: resultData.userAd,
      userName: resultData.userName,
    }
    const isValidate = checkValidate(dataForValidate, ['costCenter']);
    const isValidateAll = isCheckValidateAll(isValidate);
    if (Object.keys(isValidateAll).length > 0 && isValidationEnabled) {
      console.log(isValidateAll,);
      setIsValidate(isValidate);
      return;
    }
    setIsValidate(null);
    confirmModal.createModal("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ?", "info", async () => {
      if (resultData) {

        console.log("Saving resultData:", resultData);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
        const payload = {
          UserModel: {
            id: resultData.userId,
            user_ad: resultData.userAd,
            user_name: resultData.userName,
            cost_center_id: resultData.costCenter?.costCenterId,

          },
          currentAccessModel: currentAccessObject
        };


        dispatch(startLoadScreen());
        setTimeout(async () => {
          try {
            console.log('payload model', payload);

            // ‡πÉ‡∏ä‡πâ _POST ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const response = await _POST(payload, "/api_trr_mes/MasterData/Master_User_Edit");

            if (response && response.status === "success") {
              console.log('JobDone successfully:', response);
              // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
              Massengmodal.createModal(
                <div className="text-center p-4">
                  <p className="text-xl font-semibold mb-2 text-green-600">Success</p>
                  {/* <p className="text-lg text-gray-800">
                <span className="font-semibold text-gray-900">Request No:</span>
                <span className="font-bold text-indigo-600 ml-1">{response.req_no}</span>
              </p> */}
                </div>,
                'success', () => {
                  dispatch(endLoadScreen());
                  handleClose();
                });
            } else {
              console.error('Failed to Edit:', response);
              dispatch(endLoadScreen());
              // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            }
          } catch (error) {
            console.error('Error Edit:', error);
            dispatch(endLoadScreen());
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          }

        }, 2000);
      }
    });

  };

  //-------------------- Delete Data ‡πÑ‡∏õ‡∏•‡∏á Database
  const UserDelete = async () => {
    console.log('Call : UserDelete', resultData, moment().format('HH:mm:ss:SSS'));

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô  Update Current Access Event Name
    updateSessionStorageCurrentAccess('event_name', 'Delete/Master_User_Delete');

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• currentAccessObject ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å sessionStorage ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const storedAccessData = sessionStorage.getItem('current_access');
    const currentAccessObject = storedAccessData ? JSON.parse(storedAccessData) : {};
    console.log(currentAccessObject, 'currentAccessObject');

    const dataForValidate = {
      costCenter: resultData.costCenter,
      userAd: resultData.userAd,
      userName: resultData.userName,
    }
    const isValidate = checkValidate(dataForValidate, ['costCenter']);
    const isValidateAll = isCheckValidateAll(isValidate);
    if (Object.keys(isValidateAll).length > 0 && isValidationEnabled) {
      console.log(isValidateAll,);
      setIsValidate(isValidate);
      return;
    }
    setIsValidate(null);
    confirmModal.createModal("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ?", "info", async () => {
      if (resultData) {

        console.log("Saving resultData:", resultData);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
        const payload = {
          UserModel: {
            id: resultData.userId,
          },
          currentAccessModel: currentAccessObject
        };


        dispatch(startLoadScreen());
        setTimeout(async () => {
          try {
            console.log('payload model', payload);

            // ‡πÉ‡∏ä‡πâ _POST ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const response = await _POST(payload, "/api_trr_mes/MasterData/Master_User_Delete");

            if (response && response.status === "success") {
              console.log('JobDone successfully:', response);
              // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
              Massengmodal.createModal(
                <div className="text-center p-4">
                  <p className="text-xl font-semibold mb-2 text-green-600">Success</p>
                  {/* <p className="text-lg text-gray-800">
                <span className="font-semibold text-gray-900">Request No:</span>
                <span className="font-bold text-indigo-600 ml-1">{response.req_no}</span>
              </p> */}
                </div>,
                'success', () => {
                  dispatch(endLoadScreen());
                  handleClose();
                });
            } else {
              console.error('Failed to Delete:', response);
              dispatch(endLoadScreen());
              // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            }
          } catch (error) {
            console.error('Error Delete:', error);
            dispatch(endLoadScreen());
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          }

        }, 2000);
      }
    });

  };

  return (
    <div>
      <div className="max-lg rounded overflow-hidden shadow-xl bg-white mt-5 mb-5">
        <div className="px-6 pt-4">
          <label className="text-2xl ml-2 mt-3 mb-5 sarabun-regular">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</label>
        </div>
        <div className="row px-10 pt-0 pb-5">
          <div className="col-md-3 mb-2">
            <FullWidthTextField
              labelName={"User Ad"}
              value={userAd}
              onChange={(value) => setUserAd(value)}
            />
          </div>
          <div className="col-md-3 mb-2">
            <FullWidthTextField
              labelName={"‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"}
              value={userName}
              onChange={(value) => setUserName(value)}
            />
          </div>
          <div className="col-md-3 mb-2">
            <AutocompleteComboBox
              filterOptions={filterOptions}
              value={selectedCostCenter}
              labelName={"Cost Center"}
              options={optionsSearch.costCenter}
              column="costCentersCodeAndName"
              setvalue={handleAutocompleteChange(setSelectedCostCenter)}
            />
          </div>
          <div className="col-md-3 mb-2">
            <AutocompleteComboBox
              filterOptions={filterOptions}
              value={selectedServiceCenter}
              labelName={"Service Center"}
              options={optionsSearch.serviceCenter}
              column="serviceCentersCodeAndName"
              setvalue={handleAutocompleteChange(setSelectedServiceCenter)}
            />
          </div>
          <div className="flex justify-end pt-2">
            <div className="col-md-1 px-1">
              <FullWidthButton
                labelName={"‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"}
                handleonClick={handleSearch}
                variant_text="contained"
                colorname={"success"}
              />
            </div>
            <div className="col-md-1 px-1">
              <FullWidthButton
                labelName={"‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï"}
                handleonClick={handleReset}
                variant_text="contained"
                colorname={"inherit"}
              />
            </div>
          </div>
        </div>
      </div>

      <div className="max-lg rounded overflow-hidden shadow-lg bg-white mb-5">
        <div>
          <EnhancedTable
            rows={dataList}
            buttonLabal_1={showButton ? "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" : ""} // Show button label only if "Add" is found
            buttonColor_1="info"
            headCells={MasterUser_headCells}
            tableName={"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"}
            handleonClick_1={handleClickAdd}
            roleName={currentUser?.role_name}
          />
        </div>
        <FuncDialog
          open={openAdd} // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡∏ñ‡πâ‡∏≤ openAdd, openView, openEdit ‡∏´‡∏£‡∏∑‡∏≠ openDelete ‡πÄ‡∏õ‡πá‡∏ô true
          dialogWidth="lg"
          openBottonHidden={true}
          titlename={'‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
          handleClose={handleClose}
          handlefunction={UserAdd}
          colorBotton="success"
          actions={"Create"}
          element={
            <UserBody
              onDataChange={handleDataChange}
              defaultValues={defaultValues}
              options={options} // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Combobox ‡πÑ‡∏õ‡∏¢‡∏±‡∏á UserBody   
              actions={"Create"}

            />
          }
        />
        <FuncDialog
          open={openView} // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡∏ñ‡πâ‡∏≤ openAdd, openView, openEdit ‡∏´‡∏£‡∏∑‡∏≠ openDelete ‡πÄ‡∏õ‡πá‡∏ô true
          dialogWidth="lg"
          openBottonHidden={true}
          titlename={'‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
          handleClose={handleClose}
          colorBotton="success"
          actions={"Reade"}
          element={
            <UserBody
              onDataChange={handleDataChange}
              defaultValues={defaultValues}
              options={options} // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Combobox ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ServiceRequestBody     
              disableOnly
              actions={"Reade"}
            />
          }
        />
        <FuncDialog
          open={openEdit} // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡∏ñ‡πâ‡∏≤ openAdd, openView, openEdit ‡∏´‡∏£‡∏∑‡∏≠ openDelete ‡πÄ‡∏õ‡πá‡∏ô true
          dialogWidth="lg"
          openBottonHidden={true}
          titlename={'‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
          handleClose={handleClose}
          handlefunction={UserEdit}
          colorBotton="success"
          actions={"Update"}
          element={
            <UserBody
              onDataChange={handleDataChange}
              defaultValues={defaultValues}
              options={options} // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Combobox ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ServiceRequestBody 
              actions={"Update"}
              

            />
          }
        />
        <FuncDialog
          open={openDelete} // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡∏ñ‡πâ‡∏≤ openAdd, openView, openEdit ‡∏´‡∏£‡∏∑‡∏≠ openDelete ‡πÄ‡∏õ‡πá‡∏ô true
          dialogWidth="lg"
          openBottonHidden={true}
          titlename={'‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
          handleClose={handleClose}
          handlefunction={UserDelete} // service
          colorBotton="success"
          actions={"Delete"}
          element={
            <UserBody
              onDataChange={handleDataChange}
              defaultValues={defaultValues}
              options={options} // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Combobox ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ServiceRequestBody
              disableOnly
              actions={"Reade"}

            />
          }
        />
      </div>
    </div>


  )
}
