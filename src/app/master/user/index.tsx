import React, { useEffect, useState } from 'react'
import FullWidthTextField from '../../../components/MUI/FullWidthTextField'
import AutocompleteComboBox from '../../../components/MUI/AutocompleteComboBox'
import FullWidthButton from '../../../components/MUI/FullWidthButton'
import moment from 'moment';
import { _POST } from '../../../service/mas';
import EnhancedTable from '../../../components/MUI/DataTables';
import { useSelector } from 'react-redux';
import { MasterUser_headCells } from '../../../../libs/columnname';
import ActionManageCell from '../../../components/MUI/ActionManageCell';
import { dateFormatTimeEN } from '../../../../libs/datacontrol';

//======================== OptionsState ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Drop Down ==========================
/*
    - ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á interface options state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó(Type)
*/
interface OptionsState {
  costCenter: any[];
  serviceCenter: any[];
}

const initialOptions: OptionsState = {
  costCenter: [],
  serviceCenter: [],
};



export default function User() {

  //========================= useState ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• =============================
  const [userAd, setUserAd] = useState("");
  const [userName, setUserName] = useState("");
  const [selectedCostCenter, setSelectedCostCenter] = useState<any>(null);
  const [optionsSearch, setOptionsSearch] = useState<OptionsState>(initialOptions); // State for combobox options
  const [selectedServiceCenter, setSelectedServiceCenter] = useState<any>(null);
  const handleAutocompleteChange = (setter: React.Dispatch<React.SetStateAction<any>>) => (value: any) => {
    setter(value);
  };
  const [actionType, setActionType] = useState<string | null>(null); // Corrected type
  const [error, setError] = useState<string | null>(null); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î 

  //============================= ‡∏´‡∏ô‡πâ‡∏≤ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ===================================
  useEffect(() => {
    console.log('Call : üü¢[1] Search fetch Master Data', moment().format('HH:mm:ss:SSS'));
    const initFetch = async () => {
      try {
        await searchFetchServiceCenters(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
      } catch (error) {
        console.error('Error in initFetch:', error);
      }
    };

    initFetch();
  }, []); // [] ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ñ‡∏π‡∏Å mount

  /*‡∏´‡∏ô‡πâ‡∏≤ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•*/
  const handleSearch = () => {
    setActionType('search');
  };

  const handleReset = () => {
    setUserName("");
    setUserAd("");
    setSelectedCostCenter(null);
    setActionType('reset');
  };

  // Use useEffect to call dataTableMasterUser_GET only on specific action
  useEffect(() => {
    if (actionType) {
      dataTableMasterUser_GET(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏™‡πà‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      setActionType(null); // Reset actionType after fetching data
    }
  }, [actionType]);

  const searchFetchServiceCenters = async () => {
    console.log('Call : searchFetchServiceCenters', moment().format('HH:mm:ss:SSS'));

    const dataset = {

    };

    try {
      const response = await _POST(dataset, "/api_trr_mes/MasterData/Cost_Center_Get");

      if (response && response.status === "success") {
        const serviceCenters = response.data.map((center: any) => ({

          serviceCenterId: center.id,
          serviceCenterCode: center.cost_center_code,
          serviceCenterName: center.cost_center_name,
          serviceCentersCodeAndName: center.cost_center_name + ' [' + center.cost_center_code + ']'
        }));

        // console.log(serviceCenters, 'Service Center');

        setOptionsSearch((prevOptions) => ({
          ...prevOptions,
          serviceCenter: serviceCenters,
        }));
      } else {
        setError("Failed to fetch service centers.");
      }
    } catch (error) {
      console.error("Error fetching service centers:", error);
      setError("An error occurred while fetching service centers.");
    }
  };


  //============================== useState ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô / ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á ================================
  const [dataList, setDataList] = useState<any[]>([]);
  const menuFuncList = useSelector((state: any) => state?.menuFuncList);
  const [openAdd, setOpenAdd] = useState(false);
  const currentUser = useSelector((state: any) => state?.user?.user);

  //‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà : ‡πÑ‡∏ß‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°" ‡πÅ‡∏™‡∏î‡∏á ‡πÅ‡∏•‡∏∞ ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á
  const showButton = (menuFuncList || []).some((menuFunc: any) => menuFunc.func_name === "Add");
  const roleName = currentUser?.role_name;

  const handleClickAdd = () => {
    setOpenAdd(true);
  };

  //‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á User Get 
  useEffect(() => {
    console.log('Call : üü¢[2] fetch Data TableMasterUser GET', moment().format('HH:mm:ss:SSS'));
    if (!currentUser) return;
    dataTableMasterUser_GET();

  }, [currentUser]);

  //Get ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏™‡πà ‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  const dataTableMasterUser_GET = async () => {
    console.log('Call : dataTableMasterUser_GET', moment().format('HH:mm:ss:SSS'));

    if (!currentUser) return;

    const dataset = {
    };

    try {
      const response = await _POST(dataset, "/api_trr_mes/MasterData/Master_User_Get");

      if (response && response.status === "success") {
        const { data: result } = response;

        const newData: any = []

        Array.isArray(result) && result.forEach((el) => {
          //console.log(el, "üòäüòäüòä");

          el.create_date = dateFormatTimeEN(el.create_date, "DD/MM/YYYY HH:mm:ss")
          el.update_date = dateFormatTimeEN(el.update_date, "DD/MM/YYYY HH:mm:ss")
          el.cost_center_label = "[" + el.cost_center_code + "]" + " | " + el.cost_center_name

          el.ACTION = null
          el.ACTION = (
            <ActionManageCell
              onClick={(name) => {
                if (name == 'View') {
                  //handleClickView(el)
                } else if (name == 'Edit') {
                  //handleClickEdit(el)
                } else if (name == 'Delete') {
                  //handleClickDelete(el)
                }
              }}
              Defauft={true} //‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
            />
          )
          newData.push(el)
        })
        console.log(newData, '‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å ‡∏ï‡∏≤‡∏£‡∏≤‡∏á');

        setDataList(newData);
      }
    } catch (e) {
      console.error("Error fetching service requests:", e);
    }
  };


  return (
    <div>
      <div className="max-lg rounded overflow-hidden shadow-xl bg-white mt-5 mb-5">
        <div className="px-6 pt-4">
          <label className="text-2xl ml-2 mt-3 mb-5 sarabun-regular">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</label>
        </div>
        <div className="row px-10 pt-0 pb-5">
          <div className="col-md-3 mb-2">
            <FullWidthTextField
              labelName={"User Ad"}
              value={userAd}
              onChange={(value) => setUserAd(value)}
            />
          </div>
          <div className="col-md-3 mb-2">
            <FullWidthTextField
              labelName={"User Name"}
              value={userName}
              onChange={(value) => setUserName(value)}
            />
          </div>
          <div className="col-md-3 mb-2">
            <AutocompleteComboBox
              value={selectedServiceCenter}
              labelName={"Service Center"}
              options={optionsSearch.serviceCenter}
              column="serviceCentersCodeAndName"
              setvalue={handleAutocompleteChange(setSelectedServiceCenter)}
            />
          </div>
          <div className="flex justify-end pt-2">
            <div className="col-md-1 px-1">
              <FullWidthButton
                labelName={"‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"}
                handleonClick={handleSearch}
                variant_text="contained"
                colorname={"success"}
              />
            </div>
            <div className="col-md-1 px-1">
              <FullWidthButton
                labelName={"‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï"}
                handleonClick={handleReset}
                variant_text="contained"
                colorname={"inherit"}
              />
            </div>
          </div>
        </div>
      </div>

      <div className="max-lg rounded overflow-hidden shadow-lg bg-white mb-5">
        <div>
          <EnhancedTable
            rows={dataList}
            buttonLabal_1={showButton ? "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" : ""} // Show button label only if "Add" is found
            buttonColor_1="info"
            headCells={MasterUser_headCells}
            tableName={"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"}
            handleonClick_1={handleClickAdd}
            roleName={currentUser?.role_name}
          />
        </div>
      </div>
    </div>


  )
}
