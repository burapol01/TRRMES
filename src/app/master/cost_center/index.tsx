import React, { useEffect, useState } from 'react'
import moment from 'moment'
import { useListConCenter } from './core/CostCenterProvider'
import { _GET, _POST } from '../../../service'
import ActionManageCell from '../../../components/MUI/ActionManageCell'
import FullWidthTextField from '../../../components/MUI/FullWidthTextField'
import FullWidthButton from '../../../components/MUI/FullWidthButton'
import AutocompleteComboBox from '../../../components/MUI/AutocompleteComboBox'
import { useDispatch, useSelector } from 'react-redux'
import FuncDialog from '../../../components/MUI/FullDialog'
import EnhancedTable from '../../../components/MUI/DataTables'
import CostCenterBody from './component/CostCenterBody'
import { Master_Cost_Center } from '../../../../libs/columnname'
import { checkValidate, isCheckValidateAll } from '../../../../libs/validations'
import { confirmModal } from '../../../components/MUI/Comfirmmodal'
import { endLoadScreen, startLoadScreen } from '../../../../redux/actions/loadingScreenAction'
import { Massengmodal } from '../../../components/MUI/Massengmodal'
import { result } from 'lodash'
import { v4 as uuidv4 } from 'uuid';
import { getCurrentAccessObject, updateSessionStorageCurrentAccess } from '../../../service/initmain'
import { setValueMas } from '../../../../libs/setvaluecallback'
import { _number, dateFormatTimeEN } from '../../../../libs/datacontrol'

// ======================== OptionsState ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Drop Down ==========================
/* --------- ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á interface optionsState ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (Type) --------- */
interface OptionsState {
    siteData: any[];
    costcenterData: any[];
}

const initialCostCenterValues = { //-----‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠
    id: "",
    siteCode: "",
    costcenterCode: "",
    costcenterName: "",
    appReqUser: "",
    serviceCenter: false
};

export default function CostCenter() {

    // =============================== SearchCostCenter ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ===============================
    const [dataCostCenter, setDataCostCenter] = useState<any[]>([]);
    const [selectsiteCode, setSelectSiteCode] = useState<any>([]);
    const [siteCode, setSiteCode] = useState<any>(null);
    const [costcenterCode, setCostCenterCode] = useState<any>(null);
    const [costcenterName, setCostCenterName] = useState("");
    const [appReqUser, setAppReqUser] = useState("");
    const [serviceCenter, setServiceCenter] = useState<any>(null);
    const handleAutocompleteChange = (setter: React.Dispatch<React.SetStateAction<any>>) => (value: any) => { setter(value) };
    const [error, setError] = useState<string | null>(null); // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

    // ============================== useState ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô / ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á ================================
    const menuFuncList = useSelector((state: any) => state?.menuFuncList);
    const [openAdd, setOpenAdd] = useState(false);
    const [openView, setOpenView] = useState<any>(false);
    const [openEdit, setOpenEdit] = useState(false);
    const [openDelete, setOpenDelete] = useState(false);
    const currentUser = useSelector((state: any) => state?.user?.user);

    // State to store default values ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á
    const [defaultValues, setDefaultValues] = useState(initialCostCenterValues);
    const [resultData, setResultData] = useState<any>(null); // State to store draft data : ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏â‡∏ö‡∏±‡∏ö‡∏£‡πà‡∏≤‡∏á

    // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà : ‡πÑ‡∏ß‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°" ‡πÅ‡∏™‡∏î‡∏á ‡πÅ‡∏•‡∏∞ ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á
    const employeeUsername = currentUser?.employee_username.toLowerCase()
    const showButton = (menuFuncList || []).some((menuFunc: any) => menuFunc.func_name === "Add");
    const isValidationEnabled = import.meta.env.VITE_APP_ENABLE_VALIDATION === 'true'; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const roleName = currentUser?.role_name;
    const dispatch = useDispatch(); // dispatch : LoadScreen [startLoadScreen - endLoadScreen]
    const employeeDomain = currentUser?.employee_domain;
    const screenName = 'Cost Center';

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sessionStorage
    function cleanAccessData(key: string) {
        // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å session storage
        const storedAccessData = sessionStorage.getItem(key);
        if (storedAccessData) {
            try {
                // ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                return JSON.parse(storedAccessData);
            } catch (error) {
                // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
                const cleanedData = storedAccessData.replace(/\\/g, '').replace(/[\u0000-\u001F\u007F-\u009F]/g, '');
                try {
                    return JSON.parse(cleanedData);
                } catch (error) {
                    console.error('Error parsing JSON after cleanup:', error);
                    return null; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á
                }
            }
        } else {
            console.log(`No value found in sessionStorage for ${key}.`);
            return null; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        }
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Current Access
    cleanAccessData('current_access');
    updateSessionStorageCurrentAccess('screen_name', screenName);

    // ==================================== useState Validate  =====================================
    const { isValidate, setIsValidate } = useListConCenter()

    // ============================= ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• =========================================
    useEffect(() => {
        console.log('Call : üü¢[1] Search Master Site Data', moment().format('HH:mm:ss:SSS'));
        const initFetch = async () => {
            try {
                await Master_Site_Get();
            } catch (error) {
                console.error('Error initFetch : ', error);
            }
        };
        initFetch();
    }, []); // [] ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô component ‡∏ñ‡∏π‡∏Å mount

    useEffect(() => {
        console.log('Call : üü¢[1] Search Master Cost Center Data', moment().format('HH:mm:ss:SSS'));
        if (selectsiteCode) {
            Master_Cost_Center_Get(null);
        }
    }, [selectsiteCode]);

    const Master_Site_Get = async () => {
        console.log('Master Site : Master_Site_Get', moment().format('YYYY-MM-DD HH:mm'));

        const dataset = {};

        try {
            const response = await _POST(dataset, "/api_trr_mes/MasterData/Master_Site_Get");

            if (response && response.status === "success") {
                // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Site ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                const allSite = response.data;

                // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Master Site
                const siteData = allSite.map((site: any) => ({
                    "id": site.id,
                    "site_code": site.site_code,
                    "site_name": site.site_name,
                    "domain": site.domain,
                    "fullname": `[${site.site_code}] ${site.site_name}`,
                }));

                setSelectSiteCode(siteData)
                console.log(allSite, 'site');

            } else {
                setError("Failed to fetch master site.");
            }
        } catch (error) {
            console.error("Error fetching master site:", error);
            setError("An error occurred while fetching site.");
        }
    }

    const Master_Cost_Center_Get = async (dataset: any) => {
        console.log('Master Cost Center : Master_Cost_Center_Get', serviceCenter, moment().format('YYYY-MM-DD HH:mm'));

        try {
            const response = await _POST(dataset, "/api_trr_mes/MasterData/Master_Cost_Center_Get");

            if (response && response.status === "success") {
                const allCostCenter = response.data;
                const newData: any = [];

                // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Master Cost Center
                Array.isArray(allCostCenter) && allCostCenter.forEach((center) => {
                    center.create_date = dateFormatTimeEN(center.create_date, "DD/MM/YYYY HH:mm:ss")
                    center.update_date = dateFormatTimeEN(center.update_date, "DD/MM/YYYY HH:mm:ss")

                    center.service_center_flag_ = center.service_center_flag === true || center.service_center_flag === "1" ? "‡πÄ‡∏õ‡πá‡∏ô" : "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô";

                    center.ACTION = <ActionManageCell onClick={(name) => {
                        if (name == 'View') {
                            handleClickView(center);
                        } else if (name == 'Edit') {
                            handleClickEdit(center);
                        } else if (name == 'Delete') {
                            handleClickDelete(center);
                        }
                    }}
                        Defauft={true} //‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
                    />
                    newData.push(center);
                    // -------------------------------------------- //
                });

                await setDataCostCenter(newData); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï

            } else {
                setError("Failed to fetch master cost centers.");
            }
        } catch (e) {
            console.error("Error fetching master cost centers:", e);
            setError("An error occurred while fetching master cost centers.");
        }
    }

    const Master_Cost_Center_Add = async () => {
        console.log('Master Cost Center : Master_Cost_Center_Add', resultData, moment().format('YYYY-MM-DD HH:mm'));

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Update Current Access Event Name
        updateSessionStorageCurrentAccess('event_name', 'Add/Master_Cost_Center_Add');

        // ---------------------------------------------------------------------------------------------------------------

        const dataForValidate = {
            site_id: resultData.siteCode?.id,
            cost_center_code: resultData.costcenterCode,
            cost_center_name: resultData.costcenterName,
            app_req_user: resultData.appReqUser,
        }

        console.log("Data validation:", dataForValidate);

        const isValidate = checkValidate(dataForValidate, ['costCenter']);
        const isValidateAll = isCheckValidateAll(isValidate);

        if (Object.keys(isValidateAll).length > 0 && isValidationEnabled) {
            console.log("Validation errors:", isValidateAll);
            setIsValidate(isValidate);
            return; // return ‡∏ñ‡πâ‡∏≤ validate ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô
        }
        setIsValidate(null); // ‡∏ñ‡πâ‡∏≤ validate ‡∏ú‡πà‡∏≤‡∏ô

        // ---------------------------------------------------------------------------------------------------------------

        confirmModal.createModal("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ?", "info", async () => {
            if (resultData) {
                console.log("Saving resultData:", resultData);

                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏™‡πà‡∏á
                const payload = {
                    CostCenterModel: [{
                        id: uuidv4(), // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Add
                        site_id: resultData.siteCode?.id,
                        cost_center_code: resultData.costcenterCode,
                        cost_center_name: resultData.costcenterName,
                        app_req_user: resultData.appReqUser,
                        service_center_flag: resultData.serviceCenter || null,
                    }],
                    currentAccessModel: getCurrentAccessObject(employeeUsername, employeeDomain, screenName) // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ user_id ‡∏à‡∏≤‡∏Å currentUser ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                };

                dispatch(startLoadScreen());
                setTimeout(async () => {
                    try {
                        console.log("payload model", payload);

                        // ‡πÉ‡∏ä‡πâ _POST ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        const response = await _POST(payload, "/api_trr_mes/MasterData/Master_Cost_Center_Add");

                        if (response && response.status === "success") {
                            console.log('Successfully :', response);

                            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                            Massengmodal.createModal(
                                <div className="text-center p-4">
                                    <p className="text-xl font-semibold mb-2 text-green-600">Success</p>
                                </div>,

                                'success', () => {
                                    dispatch(endLoadScreen());
                                    handleClose();
                                }
                            );
                        } else {
                            console.error('Failed :', response);

                            dispatch(endLoadScreen());
                            Massengmodal.createModal(
                                <div className="text-center p-4">
                                    <p className="text-xl font-semibold mb-2 text-green-600">{response.data[0].errorMessage}</p>
                                </div>,

                                'error', () => {
                                    dispatch(endLoadScreen());
                                }
                            );
                        }
                    } catch (e) {
                        console.log('Error : Master Cost Center Add', e);
                        dispatch(endLoadScreen());
                    }
                }, 0);
            }
        });
    }

    const Master_Cost_Center_Edit = async () => {
        console.log('Master Cost Center : Master_Cost_Center_Edit', resultData, moment().format('YYYY-MM-DD HH:mm'));

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô  Update Current Access Event Name
        updateSessionStorageCurrentAccess('evernt_name', 'Edit/Master_Cost_Center_Edit');

        // ---------------------------------------------------------------------------------------------------------------

        const dataForValidate = {
            site_id: resultData.siteCode?.id,
            cost_center_code: resultData.costcenterCode,
            cost_center_name: resultData.costcenterName,
            app_req_user: resultData.appReqUser,
        }

        console.log("Data validation:", dataForValidate);

        const isValidate = checkValidate(dataForValidate, ['costCenter']);
        const isValidateAll = isCheckValidateAll(isValidate);

        if (Object.keys(isValidateAll).length > 0 && isValidationEnabled) {
            console.log("Validation errors:", isValidateAll);
            setIsValidate(isValidate);
            return; // return ‡∏ñ‡πâ‡∏≤ validate ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô
        }
        setIsValidate(null); // ‡∏ñ‡πâ‡∏≤ validate ‡∏ú‡πà‡∏≤‡∏ô

        // ---------------------------------------------------------------------------------------------------------------

        setIsValidate(null);
        confirmModal.createModal("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ?", "info", async () => {
            if (resultData) {
                console.log("Saving resultData:", resultData);

                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
                const payload = {
                    CostCenterModel: [{
                        id: resultData.id,
                        site_id: resultData.siteCode.id,
                        cost_center_code: resultData.costcenterCode,
                        cost_center_name: resultData.costcenterName,
                        app_req_user: resultData.appReqUser,
                        service_center_flag: resultData?.serviceCenter ? true : false,
                    }],
                    currentAccessModel: getCurrentAccessObject(employeeUsername, employeeDomain, screenName)
                };

                console.log(payload, 'payload');

                dispatch(startLoadScreen());
                setTimeout(async () => {
                    try {
                        console.log("payload model", payload);

                        const response = await _POST(payload, "/api_trr_mes/MasterData/Master_Cost_Center_Edit")

                        if (response && response.status === "success") {
                            console.log('Successfully :', response);

                            Massengmodal.createModal(
                                <div className='text-center p-4'>
                                    <p className='text-xl font-semibold mb-2 text-green-600'>Success</p>
                                </div>,
                                'success', () => {
                                    dispatch(endLoadScreen());
                                    handleClose();
                                }
                            );
                        } else {
                            console.error(response, 'Failed ');
                            dispatch(endLoadScreen());
                        }
                    } catch (e) {
                        console.error(error, 'Failed Edit');
                        dispatch(endLoadScreen());
                    }
                }, 0);
            }
        })
    }

    const Master_Cost_Center_Delete = async () => {
        console.log('Master Cost Center : Master_Cost_Center_Delete', resultData, moment().format('YYYY-MM-DD HH:mm'));

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô  Update Current Access Event Name
        updateSessionStorageCurrentAccess('event_name', 'Delete/Master_User_Delete');

        // ---------------------------------------------------------------------------------------------------------------

        const dataForValidate = {
            site_id: resultData.siteCode?.id,
            cost_center_code: resultData.costcenterCode,
            cost_center_name: resultData.costcenterName,
            app_req_user: resultData.appReqUser,
        }

        console.log("Data validation:", dataForValidate);

        const isValidate = checkValidate(dataForValidate, ['costCenter']);
        const isValidateAll = isCheckValidateAll(isValidate);

        if (Object.keys(isValidateAll).length > 0 && isValidationEnabled) {
            console.log("Validation errors:", isValidateAll);
            setIsValidate(isValidate);
            return; // return ‡∏ñ‡πâ‡∏≤ validate ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô
        }
        setIsValidate(null); // ‡∏ñ‡πâ‡∏≤ validate ‡∏ú‡πà‡∏≤‡∏ô

        // ---------------------------------------------------------------------------------------------------------------

        setIsValidate(null);
        confirmModal.createModal("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ?", "info", async () => {
            if (resultData) {
                console.log("Saving resultData:", resultData);

                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
                const payload = {
                    CostCenterModel: [{
                        id: resultData.id, // ‡πÉ‡∏ä‡πâ ID ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Delete
                    }],
                    currentAccessModel: getCurrentAccessObject(employeeUsername, employeeDomain, screenName) // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ user_id ‡∏à‡∏≤‡∏Å currentUser ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                };

                dispatch(startLoadScreen());
                setTimeout(async () => {
                    try {
                        console.log('payload model', payload);

                        const response = await _POST(payload, "/api_trr_mes/MasterData/Master_Cost_Center_Delete")

                        if (response && response.status === "success") {
                            console.log('Successfully :', response);

                            Massengmodal.createModal(
                                <div className="text-center p-4">
                                    <p className="text-xl font-semibold mb-2 text-green-600">Success</p>
                                </div>,
                                'success', () => {
                                    dispatch(endLoadScreen());
                                    handleClose();
                                }
                            );
                        } else {
                            console.error(response, 'Failed');
                            dispatch(endLoadScreen());
                        }
                    } catch (e) {
                        console.error(error, 'Failed Edit');
                        dispatch(endLoadScreen());
                    }
                }, 0)
            }
        });
    }

    // ------------------- SetData Reade ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
    const readData = async (data: any) => {
        console.log('Call : üü¢[2] readData', data, moment().format('HH:mm:ss:SSS'));
        const setData = {
            ...defaultValues,
            id: data?.id || '',
            siteCode: data?.site_code != "" ? setValueMas(selectsiteCode, data?.site_code, "site_code") : "",
            costcenterCode: data?.cost_center_code || '',
            costcenterName: data?.cost_center_name || '',
            appReqUser: data?.app_req_user || '',
            serviceCenter: data?.service_center_flag || '',
        }
        await setDefaultValues(setData)
    };

    // ------------------- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const handleSearch = () => {
        const dataset = {
            site_code: siteCode?.site_code ? siteCode?.site_code : null,
            cost_center_code: costcenterCode ? costcenterCode : null,
            cost_center_name: costcenterName ? costcenterName : null,
            app_req_user: appReqUser ? appReqUser : null,
        };
        console.log('Call : üü¢[3] Dataset : Search', dataset, moment().format('HH:mm:ss:SSS'));
        Master_Cost_Center_Get(dataset);
    };

    // ------------------- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const handleReset = async () => {
        console.log('Call : üü¢[4] Dataset : Reset', moment().format('HH:mm:ss:SSS'));
        await setCostCenterCode(null);
        await setCostCenterName("");
        await setAppReqUser("");
        await setSiteCode(null);
        await setServiceCenter(null);
        await Master_Cost_Center_Get(null);
    };

    // ------------------- ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô Modals
    const handleClose = () => {
        setOpenView(false);
        setOpenAdd(false);
        setOpenEdit(false);
        setOpenDelete(false);
        setIsValidate(null);
        readData(null);
        Master_Cost_Center_Get(null); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Cost Center ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï 
    };

    // ------------------- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const handleClickAdd = () => {
        console.log('‡∏ï‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Add : ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• data');
        setOpenAdd(true);
    };

    // ------------------- ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const handleClickView = (data: any) => {
        console.log(data, '‡∏ï‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° View : ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• data');
        setOpenView(true);
        readData(data)
    };

    // ------------------- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const handleClickEdit = (data: any) => {
        console.log(data, '‡∏ï‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Edit : ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• data');
        setOpenEdit(true);
        readData(data)
    };

    // ------------------- ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const handleClickDelete = (data: any) => {
        console.log(data, '‡∏ï‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Delete : ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• data');
        setOpenDelete(true);
        readData(data)
    };

    // ------------------- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Models
    const handleDataChange = (data: any) => {
        setResultData(data); // ‡∏ú‡∏•‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Models
    };

    return (
        <div>
            <div className="max-lg rounded overflow-hidden shadow-xl bg-white mt-5 mb-5">
                <div className="px-6 pt-4">
                    <label className="text-2xl ml-2 mt-3 mb-5 sarabun-regular">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</label>
                </div>
                <div className="row px-10 pt-0 pb-5">
                    <div className="col-md-3 mb-2">
                        <AutocompleteComboBox
                            labelName={"Site"}
                            value={siteCode}
                            options={selectsiteCode}
                            column="fullname"
                            setvalue={handleAutocompleteChange(setSiteCode)}
                        />
                    </div>
                    <div className="col-md-3 mb-2">
                        <FullWidthTextField
                            labelName={"Cost Center Code"}
                            value={costcenterCode ? _number(costcenterCode) : ""}
                            onChange={(value) => setCostCenterCode(value)}
                        />
                    </div>
                    <div className="col-md-3 mb-2">
                        <FullWidthTextField
                            labelName={"‡∏ä‡∏∑‡πà‡∏≠ Cost Center"}
                            value={costcenterName}
                            onChange={(value) => setCostCenterName(value)}
                        />
                    </div>
                    <div className="col-md-3 mb-2">
                        <FullWidthTextField
                            labelName={"‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"}
                            value={appReqUser}
                            onChange={(value) => setAppReqUser(value)}
                        />
                    </div>

                    <div className="grid grid-cols-1 sm:grid-cols-1 md:grid-cols-1 lg:grid-cols-1 gap-1 mx-1">
                        <div className="flex justify-end pt-2">
                            <div className="col-md-1 px-1">
                                <FullWidthButton
                                    labelName={"‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"}
                                    handleonClick={handleSearch}
                                    variant_text="contained"
                                    colorname={"success"}
                                />
                            </div>
                            <div className="col-md-1 px-1">
                                <FullWidthButton
                                    labelName={"‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï"}
                                    handleonClick={handleReset}
                                    variant_text="contained"
                                    colorname={"inherit"}
                                />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div className="max-lg rounded overflow-hidden shadow-lg bg-white mb-5">
                <div>
                    <EnhancedTable
                        rows={dataCostCenter}
                        buttonLabal_1={showButton ? "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" : ""} // Show button label only if "Add" is found
                        buttonColor_1="info"
                        headCells={Master_Cost_Center}
                        tableName={"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"}
                        handleonClick_1={handleClickAdd}
                        roleName={currentUser?.role_name}
                    />
                </div>
                <FuncDialog
                    open={openAdd} // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡∏ñ‡πâ‡∏≤ openAdd, openView, openEdit ‡∏´‡∏£‡∏∑‡∏≠ openDelete ‡πÄ‡∏õ‡πá‡∏ô true
                    dialogWidth="lg"
                    openBottonHidden={true}
                    titlename={'‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                    handleClose={handleClose}
                    handlefunction={Master_Cost_Center_Add}
                    colorBotton="success"
                    actions={"Create"}
                    element={
                        <CostCenterBody
                            onDataChange={handleDataChange}
                            defaultValues={defaultValues}
                            siteData={selectsiteCode} // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Combobox ‡πÑ‡∏õ‡∏¢‡∏±‡∏á CostCenterBody   
                            actions={"Create"}
                        />
                    }
                />
                <FuncDialog
                    open={openView} // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡∏ñ‡πâ‡∏≤ openAdd, openView, openEdit ‡∏´‡∏£‡∏∑‡∏≠ openDelete ‡πÄ‡∏õ‡πá‡∏ô true
                    dialogWidth="lg"
                    openBottonHidden={true}
                    titlename={'‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                    handleClose={handleClose}
                    colorBotton="success"
                    actions={"Reade"}
                    element={
                        <CostCenterBody
                            onDataChange={handleDataChange}
                            defaultValues={defaultValues}
                            siteData={selectsiteCode} // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Combobox ‡πÑ‡∏õ‡∏¢‡∏±‡∏á CostCenterBody  
                            disableOnly
                            actions={"Reade"}
                        />
                    }
                />
                <FuncDialog
                    open={openEdit} // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡∏ñ‡πâ‡∏≤ openAdd, openView, openEdit ‡∏´‡∏£‡∏∑‡∏≠ openDelete ‡πÄ‡∏õ‡πá‡∏ô true
                    dialogWidth="lg"
                    openBottonHidden={true}
                    titlename={'‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                    handleClose={handleClose}
                    handlefunction={Master_Cost_Center_Edit}
                    colorBotton="success"
                    actions={"Update"}
                    element={
                        <CostCenterBody
                            onDataChange={handleDataChange}
                            defaultValues={defaultValues}
                            siteData={selectsiteCode} // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Combobox ‡πÑ‡∏õ‡∏¢‡∏±‡∏á CostCenterBody 
                            actions={"Update"}
                        />
                    }
                />
                <FuncDialog
                    open={openDelete} // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡∏ñ‡πâ‡∏≤ openAdd, openView, openEdit ‡∏´‡∏£‡∏∑‡∏≠ openDelete ‡πÄ‡∏õ‡πá‡∏ô true
                    dialogWidth="lg"
                    openBottonHidden={true}
                    titlename={'‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                    handleClose={handleClose}
                    handlefunction={Master_Cost_Center_Delete}
                    colorBotton="success"
                    actions={"Delete"}
                    element={
                        <CostCenterBody
                            onDataChange={handleDataChange}
                            defaultValues={defaultValues}
                            siteData={selectsiteCode} // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Combobox ‡πÑ‡∏õ‡∏¢‡∏±‡∏á CostCenterBody 
                            disableOnly
                            actions={"Reade"}
                        />
                    }
                />
            </div>
        </div>
    )
}

